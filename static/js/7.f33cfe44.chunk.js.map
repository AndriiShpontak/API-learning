{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","display","width","height","objectFit","margin","img","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/7.f33cfe44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return  <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setnewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = async(newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n        setCharList([...charList, ...newCharList]);\r\n        setnewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems (arr){\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button \r\n                disabled={newItemLoading} \r\n                style={{'display' : charEnded ? 'none' : 'block'}}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n \r\nconst View = ({data}) => {                                   \r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=e084784ba3513ccda2b212d463c65c44';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { \r\n            clearError, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return  <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}